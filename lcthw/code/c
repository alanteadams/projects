00000000: 2369 6e63 6c75 6465 203c 7374 6469 6f2e  #include <stdio.
00000010: 683e 0a23 696e 636c 7564 6520 3c73 7464  h>.#include <std
00000020: 6c69 622e 683e 0a23 696e 636c 7564 6520  lib.h>.#include 
00000030: 3c65 7272 6e6f 2e68 3e0a 2369 6e63 6c75  <errno.h>.#inclu
00000040: 6465 203c 7374 7269 6e67 2e68 3e0a 0a2f  de <string.h>../
00000050: 2a2a 204f 7572 206f 6c64 2066 7269 656e  ** Our old frien
00000060: 6420 6469 6520 6672 6f6d 2065 7831 372e  d die from ex17.
00000070: 202a 2f0a 766f 6964 2064 6965 2863 6f6e   */.void die(con
00000080: 7374 2063 6861 7220 2a6d 6573 7361 6765  st char *message
00000090: 290a 7b0a 2020 2020 6966 2028 6572 726e  ).{.    if (errn
000000a0: 6f29 207b 0a20 2020 2020 2020 2070 6572  o) {.        per
000000b0: 726f 7228 6d65 7373 6167 6529 3b0a 2020  ror(message);.  
000000c0: 2020 7d20 656c 7365 207b 0a20 2020 2020    } else {.     
000000d0: 2070 7269 6e74 6628 2245 5252 4f52 3a20   printf("ERROR: 
000000e0: 2573 5c6e 222c 206d 6573 7361 6765 293b  %s\n", message);
000000f0: 0a20 2020 207d 0a0a 2020 2020 6578 6974  .    }..    exit
00000100: 2831 293b 0a7d 0a0a 2f2f 2061 2074 7970  (1);.}..// a typ
00000110: 6564 6566 2063 7265 6174 6573 2061 2066  edef creates a f
00000120: 616b 6520 7479 7065 2c20 696e 2074 6869  ake type, in thi
00000130: 730a 2f2f 2063 6173 6520 666f 7220 6120  s.// case for a 
00000140: 6675 6e63 7469 6f6e 2070 6f69 6e74 6572  function pointer
00000150: 0a74 7970 6564 6566 2069 6e74 2028 2a63  .typedef int (*c
00000160: 6f6d 7061 7265 5f63 6229 2028 696e 7420  ompare_cb) (int 
00000170: 612c 2069 6e74 2062 293b 0a0a 2f2a 2a0a  a, int b);../**.
00000180: 202a 2041 2063 6c61 7373 6963 2062 7562   * A classic bub
00000190: 626c 6520 736f 7274 2066 756e 6374 696f  ble sort functio
000001a0: 6e20 7468 6174 2075 7365 7320 7468 650a  n that uses the.
000001b0: 202a 2063 6f6d 7061 7265 5f63 6220 746f   * compare_cb to
000001c0: 2064 6f20 7468 6520 736f 7274 696e 672e   do the sorting.
000001d0: 0a2a 2f0a 696e 7420 2a62 7562 626c 655f  .*/.int *bubble_
000001e0: 736f 7274 2869 6e74 202a 6e75 6d62 6572  sort(int *number
000001f0: 732c 2069 6e74 2063 6f75 6e74 2c20 636f  s, int count, co
00000200: 6d70 6172 655f 6362 2063 6d70 290a 7b0a  mpare_cb cmp).{.
00000210: 2020 2020 696e 7420 7465 6d70 203d 2030      int temp = 0
00000220: 3b0a 2020 2020 696e 7420 6920 3d20 303b  ;.    int i = 0;
00000230: 0a20 2020 2069 6e74 206a 203d 2030 3b0a  .    int j = 0;.
00000240: 2020 2020 696e 7420 2a74 6172 6765 7420      int *target 
00000250: 3d20 6d61 6c6c 6f63 2863 6f75 6e74 202a  = malloc(count *
00000260: 2073 697a 656f 6628 696e 7429 293b 0a0a   sizeof(int));..
00000270: 2020 2020 6966 2028 2174 6172 6765 7429      if (!target)
00000280: 0a20 2020 2020 2020 2064 6965 2822 4d65  .        die("Me
00000290: 6d6f 7279 2045 7272 6f72 2e22 293b 0a0a  mory Error.");..
000002a0: 2020 2020 6d65 6d63 7079 2874 6172 6765      memcpy(targe
000002b0: 742c 206e 756d 6265 7273 2c20 636f 756e  t, numbers, coun
000002c0: 7420 2a20 7369 7a65 6f66 2869 6e74 2929  t * sizeof(int))
000002d0: 3b0a 0a20 2020 2066 6f72 2028 6920 3d20  ;..    for (i = 
000002e0: 303b 2069 203c 2063 6f75 6e74 3b20 692b  0; i < count; i+
000002f0: 2b29 207b 0a20 2020 2020 2020 2066 6f72  +) {.        for
00000300: 2028 6a20 3d20 303b 206a 203c 2063 6f75   (j = 0; j < cou
00000310: 6e74 202d 2031 3b20 6a2b 2b29 207b 0a20  nt - 1; j++) {. 
00000320: 2020 2020 2020 2020 2020 2069 6620 2863             if (c
00000330: 6d70 2874 6172 6765 745b 6a5d 2c20 7461  mp(target[j], ta
00000340: 7267 6574 5b6a 202b 2031 5d29 203e 2030  rget[j + 1]) > 0
00000350: 2920 7b0a 2020 2020 2020 2020 2020 2020  ) {.            
00000360: 2020 2020 7465 6d70 203d 2074 6172 6765      temp = targe
00000370: 745b 6a20 2b20 315d 3b0a 2020 2020 2020  t[j + 1];.      
00000380: 2020 2020 2020 2020 2020 7461 7267 6574            target
00000390: 5b6a 202b 2031 5d20 3d20 7461 7267 6574  [j + 1] = target
000003a0: 5b6a 5d3b 0a20 2020 2020 2020 2020 2020  [j];.           
000003b0: 2020 2020 2074 6172 6765 745b 6a5d 203d       target[j] =
000003c0: 2074 656d 703b 0a20 2020 2020 2020 2020   temp;.         
000003d0: 2020 207d 0a20 2020 2020 2020 207d 0a20     }.        }. 
000003e0: 2020 207d 0a0a 2020 2020 7265 7475 726e     }..    return
000003f0: 2074 6172 6765 743b 0a7d 0a0a 696e 7420   target;.}..int 
00000400: 736f 7274 6564 5f6f 7264 6572 2869 6e74  sorted_order(int
00000410: 2061 2c20 696e 7420 6229 0a7b 0a20 2020   a, int b).{.   
00000420: 2072 6574 7572 6e20 2861 203e 2062 2920   return (a > b) 
00000430: 2d20 2861 203c 2062 293b 0a7d 0a0a 696e  - (a < b);.}..in
00000440: 7420 7265 7665 7273 655f 6f72 6465 7228  t reverse_order(
00000450: 696e 7420 612c 2069 6e74 2062 290a 7b0a  int a, int b).{.
00000460: 2020 2020 7265 7475 726e 2028 6120 3c20      return (a < 
00000470: 6229 202d 2028 6120 3e20 6229 3b0a 7d0a  b) - (a > b);.}.
00000480: 0a69 6e74 2073 7472 616e 6765 5f6f 7264  .int strange_ord
00000490: 6572 2869 6e74 2061 2c20 696e 7420 6229  er(int a, int b)
000004a0: 0a7b 0a20 2020 2069 6620 2861 203d 3d20  .{.    if (a == 
000004b0: 3020 7c7c 2062 203d 3d20 3029 207b 0a20  0 || b == 0) {. 
000004c0: 2020 2020 2020 2072 6574 7572 6e20 303b         return 0;
000004d0: 0a20 2020 207d 2065 6c73 6520 7b0a 2020  .    } else {.  
000004e0: 2020 2020 7265 7475 726e 2061 2025 2062      return a % b
000004f0: 3b0a 2020 2020 7d0a 7d0a 0a2f 2a2a 0a20  ;.    }.}../**. 
00000500: 2a20 5573 6564 2074 6f20 7465 7374 2074  * Used to test t
00000510: 6861 7420 7765 2061 7265 2073 6f72 7469  hat we are sorti
00000520: 6e67 2074 6869 6e67 7320 636f 7272 6563  ng things correc
00000530: 746c 790a 202a 2062 7920 7468 6520 646f  tly. * by the do
00000540: 696e 6720 7468 6520 736f 7274 2061 6e64  ing the sort and
00000550: 2070 7269 6e74 696e 6720 6974 206f 7574   printing it out
00000560: 2e0a 202a 2f0a 766f 6964 2074 6573 745f  .. */.void test_
00000570: 736f 7274 696e 6728 696e 7420 2a6e 756d  sorting(int *num
00000580: 6265 7273 2c20 696e 7420 636f 756e 742c  bers, int count,
00000590: 2063 6f6d 7061 7265 5f63 6220 636d 7029   compare_cb cmp)
000005a0: 0a7b 0a20 2020 2069 6e74 2069 203d 2030  .{.    int i = 0
000005b0: 3b0a 2020 2020 696e 7420 2a73 6f72 7465  ;.    int *sorte
000005c0: 6420 3d20 6275 6262 6c65 5f73 6f72 7428  d = bubble_sort(
000005d0: 6e75 6d62 6572 732c 2063 6f75 6e74 2c20  numbers, count, 
000005e0: 636d 7029 3b0a 0a20 2020 2069 6620 2821  cmp);..    if (!
000005f0: 736f 7274 6564 290a 2020 2020 2020 2020  sorted).        
00000600: 6469 6528 2246 6169 6c65 6420 746f 2073  die("Failed to s
00000610: 6f72 7420 6173 2072 6571 7565 7374 6564  ort as requested
00000620: 2e22 293b 0a0a 2020 2020 666f 7220 2869  .");..    for (i
00000630: 203d 2030 3b20 6920 3c20 636f 756e 743b   = 0; i < count;
00000640: 2069 2b2b 2920 7b0a 2020 2020 2020 2020   i++) {.        
00000650: 7072 696e 7466 2822 2564 2022 2c20 736f  printf("%d ", so
00000660: 7274 6564 5b69 5d29 3b0a 2020 2020 7d0a  rted[i]);.    }.
00000670: 2020 2020 7072 696e 7466 2822 5c6e 2229      printf("\n")
00000680: 3b0a 0a20 2020 2066 7265 6528 736f 7274  ;..    free(sort
00000690: 6564 293b 0a0a 2020 2020 756e 7369 676e  ed);..    unsign
000006a0: 6564 2063 6861 7220 2a64 6174 6120 3d20  ed char *data = 
000006b0: 2875 6e73 6967 6e65 6420 6368 6172 202a  (unsigned char *
000006c0: 2963 6d70 3b0a 0a20 2020 2066 6f72 2869  )cmp;..    for(i
000006d0: 203d 2030 3b20 6920 3c20 3235 3b20 692b   = 0; i < 25; i+
000006e0: 2b29 207b 0a20 2020 2020 2020 2070 7269  +) {.        pri
000006f0: 6e74 6628 2225 3032 783a 222c 2064 6174  ntf("%02x:", dat
00000700: 615b 695d 293b 0a20 2020 207d 0a0a 2020  a[i]);.    }..  
00000710: 2020 7072 696e 7466 2822 5c6e 2229 3b0a    printf("\n");.
00000720: 7d0a 0a69 6e74 206d 6169 6e28 696e 7420  }..int main(int 
00000730: 6172 6763 2c20 6368 6172 202a 6172 6776  argc, char *argv
00000740: 5b5d 290a 7b0a 2020 2020 6966 2028 6172  []).{.    if (ar
00000750: 6763 203c 2032 2920 6469 6528 2255 5341  gc < 2) die("USA
00000760: 4745 3a20 6578 3138 2034 2033 2031 2035  GE: ex18 4 3 1 5
00000770: 2036 2229 3b0a 0a20 2020 2069 6e74 2063   6");..    int c
00000780: 6f75 6e74 203d 2061 7267 6320 2d20 313b  ount = argc - 1;
00000790: 0a20 2020 2069 6e74 2069 203d 2030 3b0a  .    int i = 0;.
000007a0: 2020 2020 6368 6172 202a 2a69 6e70 7574      char **input
000007b0: 7320 3d20 6172 6776 202b 2031 3b0a 0a20  s = argv + 1;.. 
000007c0: 2020 2069 6e74 202a 6e75 6d62 6572 7320     int *numbers 
000007d0: 3d20 6d61 6c6c 6f63 2863 6f75 6e74 202a  = malloc(count *
000007e0: 2073 697a 656f 6628 696e 7429 293b 0a20   sizeof(int));. 
000007f0: 2020 2069 6628 216e 756d 6265 7273 2920     if(!numbers) 
00000800: 6469 6528 224d 656d 6f72 7920 6572 726f  die("Memory erro
00000810: 722e 2229 3b0a 0a20 2020 2066 6f72 2028  r.");..    for (
00000820: 6920 3d20 303b 2069 203c 2063 6f75 6e74  i = 0; i < count
00000830: 3b20 692b 2b29 207b 0a20 2020 2020 2020  ; i++) {.       
00000840: 206e 756d 6265 7273 5b69 5d20 3d20 6174   numbers[i] = at
00000850: 6f69 2869 6e70 7574 735b 695d 293b 0a20  oi(inputs[i]);. 
00000860: 2020 207d 0a0a 2020 2020 7465 7374 5f73     }..    test_s
00000870: 6f72 7469 6e67 286e 756d 6265 7273 2c20  orting(numbers, 
00000880: 636f 756e 742c 2073 6f72 7465 645f 6f72  count, sorted_or
00000890: 6465 7229 3b0a 2020 2020 7465 7374 5f73  der);.    test_s
000008a0: 6f72 7469 6e67 286e 756d 6265 7273 2c20  orting(numbers, 
000008b0: 636f 756e 742c 2072 6576 6572 7365 5f6f  count, reverse_o
000008c0: 7264 6572 293b 0a20 2020 2074 6573 745f  rder);.    test_
000008d0: 736f 7274 696e 6728 6e75 6d62 6572 732c  sorting(numbers,
000008e0: 2063 6f75 6e74 2c20 7374 7261 6e67 655f   count, strange_
000008f0: 6f72 6465 7229 3b0a 0a20 2020 2066 7265  order);..    fre
00000900: 6528 6e75 6d62 6572 7329 3b0a 0a20 2020  e(numbers);..   
00000910: 2072 6574 7572 6e20 303b 0a7d 0a          return 0;.}.
